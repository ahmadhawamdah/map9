// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bridge {
  structureNumber   String @id @unique
  yearBuilt         Int
  yearReconstructed Int?
  history           Int
  serviceOn         Int
  routePrefix       Int
  location          String
  fedAgency         String
  lat               Int
  long              Int

  navigation  Navigation[]
  conditon    Condition[]
  geometry    Geometry[]
  maintenance Maintenance[]
  structure   Structure[]
}

model Navigation {
  id               String  @id @default(cuid())
  structureNumber  String
  direction        Int
  trafficDirection Int
  navigation       Int? // Changed to Int? to accommodate null values for "N"
  toll             Boolean // Changed to Boolean to align with the boolean conversion in the push function
  functionalClass  Int
  detourKilos      Float
  kilopoint        Float
  trafficLanesOn   Int
  trafficLanesUnd  Int
  adt              Int
  percentAdtTruck  Float? // Changed to Float? to handle potential null values
  yearAdt          Int
  futureAdt        Int
  yearOfFutureAdt  Int
  Bridge           Bridge  @relation(fields: [structureNumber], references: [structureNumber])

  @@index([structureNumber]) // Index for faster lookups on structureNumber
}

model Condition {
  id                 String  @id @default(cuid()) // Unique identifier for the condition record
  structureNumber    String // Foreign key referencing the Bridge model
  bridgeCondition    String
  deckCond           String
  superstructureCond String
  substructureCond   String
  channelCond        String?
  culvertCond        String?
  structuralEval     String
  deckGeometryEval   String
  underclearanceEval String?
  waterwayEval       String?
  apprRoadEval       Int
  postingEval        Int
  lowestRating       Int

  Bridge Bridge @relation(fields: [structureNumber], references: [structureNumber])

  @@index([structureNumber]) // Index for faster lookups on structureNumber
}

model Maintenance {
  id                  String  @id @default(cuid())
  maintenance         Int
  structureNumber     String
  maintenanceType     Int
  bridgeImprovement   Float?
  roadwayImprovement  Float?
  totalImprovement    Float?
  yearOfImprovement   Float?
  workProposed        Float?
  inspectionFrequency Int
  fractureCritical    String?
  openClosedPosted    String

  Bridge Bridge @relation(fields: [structureNumber], references: [structureNumber])

  @@index([structureNumber])
}

model Structure {
  id                String @id @default(cuid())
  structureNumber   String // Foreign key to Bridge model
  apprKind          Int
  structureKind     Int
  structureType     Int
  apprType          Int
  mainUnitSpans     Int
  apprSpans         Int
  medianCode        Int
  deckStructureType String
  railings          Int?
  transitions       Int?
  apprRail          Int?
  apprRailEnd       Int?
  parallelStructure String

  Bridge Bridge @relation(fields: [structureNumber], references: [structureNumber])

  @@index([structureNumber])
}

model Geometry {
  id                String  @id @default(cuid())
  structureNumber   String
  minVertClearance  Float
  apprWidth         Float
  structureFlared   Int
  navVertClearance  Float
  navHorrClearance  Float
  leftCurbWidth     Float
  rightCurbWidth    Float
  roadwayWidth      Float
  deckWidth         Float
  vertClearOver     Float
  vertClearUnderRef String?
  vertClearUnder    Float
  latUnderRef       String?
  latUnder          Float
  leftLatUnder      Float
  horrClearance     Float
  deckArea          Float
  maxSpanLength     Float
  structureLength   Float
  minNavClearance   Float
  degreesSkew       Int

  Bridge Bridge @relation(fields: [structureNumber], references: [structureNumber])

  @@index([structureNumber])
}
