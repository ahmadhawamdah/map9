{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmadhawamdah/Documents/map9/src/app/api/bridge/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n\n    const {\n      stateCode = \"\",\n      yearBuilt = { min: 1967, max: 2024 },\n      functionalClass = { min: 0, max: 20 },\n      designLoad = \"\",\n    } = body;\n\n    const filters: any = {};\n    if (stateCode) filters.stateCode = parseInt(stateCode, 10);\n    if (yearBuilt.min || yearBuilt.max) {\n      filters.yearBuilt = {\n        gte: yearBuilt.min || undefined,\n        lte: yearBuilt.max || undefined,\n      };\n      if (functionalClass.min || functionalClass.max) {\n        filters.functionalClass = {\n          gte: functionalClass.min || undefined,\n          lte: functionalClass.max || undefined,\n        };\n      }\n    }\n\n    if (designLoad) filters.designLoad = designLoad;\n\n    const bridges = await prisma.bridge.findMany({\n      where: filters,\n      select: {\n        structureNumber: true,\n        stateCode: true,\n        yearBuilt: true,\n        functionalClass: true,\n        designLoad: true,\n      },\n    });\n\n    return new Response(JSON.stringify(bridges), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error fetching bridges:\", error);\n\n    return new Response(\n      JSON.stringify({\n        message: \"Failed to fetch bridges\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAExB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,EACJ,YAAY,EAAE,EACd,YAAY;YAAE,KAAK;YAAM,KAAK;QAAK,CAAC,EACpC,kBAAkB;YAAE,KAAK;YAAG,KAAK;QAAG,CAAC,EACrC,aAAa,EAAE,EAChB,GAAG;QAEJ,MAAM,UAAe,CAAC;QACtB,IAAI,WAAW,QAAQ,SAAS,GAAG,SAAS,WAAW;QACvD,IAAI,UAAU,GAAG,IAAI,UAAU,GAAG,EAAE;YAClC,QAAQ,SAAS,GAAG;gBAClB,KAAK,UAAU,GAAG,IAAI;gBACtB,KAAK,UAAU,GAAG,IAAI;YACxB;YACA,IAAI,gBAAgB,GAAG,IAAI,gBAAgB,GAAG,EAAE;gBAC9C,QAAQ,eAAe,GAAG;oBACxB,KAAK,gBAAgB,GAAG,IAAI;oBAC5B,KAAK,gBAAgB,GAAG,IAAI;gBAC9B;YACF;QACF;QAEA,IAAI,YAAY,QAAQ,UAAU,GAAG;QAErC,MAAM,UAAU,MAAM,OAAO,MAAM,CAAC,QAAQ,CAAC;YAC3C,OAAO;YACP,QAAQ;gBACN,iBAAiB;gBACjB,WAAW;gBACX,WAAW;gBACX,iBAAiB;gBACjB,YAAY;YACd;QACF;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,UAAU;YAC3C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}