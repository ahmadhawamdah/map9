{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmadhawamdah/Documents/map9/prisma/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default prisma;\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,2GAAA,CAAA,eAAY;AACzB;AAMA,MAAM,SAAS,WAAW,YAAY,IAAI;uCAE3B;AAEf,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmadhawamdah/Documents/map9/src/app/api/bridge/route.ts"],"sourcesContent":["import prisma from \"../../../../prisma/db\";\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n\n    const {\n      location = \"\",\n      yearBuilt = { min: 1967, max: 2024 },\n      yearReconstructed = { min: 0, max: 2024 },\n      fedAgency = \"\",\n      serviceOn = 0,\n      routePrefix = 0,\n      long = 0,\n      lat = 0,\n    } = body;\n\n    // Build filters dynamically\n    const filters: any = {};\n    if (location) filters.stateCode = parseInt(location, 10);\n    if (yearBuilt.min || yearBuilt.max) {\n      filters.yearBuilt = {\n        gte: yearBuilt.min || undefined,\n        lte: yearBuilt.max || undefined,\n      };\n    }\n    if (yearReconstructed.min || yearReconstructed.max) {\n      filters.yearReconstructed = {\n        gte: yearReconstructed.min || undefined,\n        lte: yearReconstructed.max || undefined,\n      };\n    }\n    if (fedAgency) filters.fedAgency = fedAgency;\n    if (serviceOn) filters.serviceOn = serviceOn;\n    if (routePrefix) filters.routePrefix = routePrefix;\n\n    // Query database\n    const bridges = await prisma.bridge.findMany({\n      where: filters,\n      select: {\n        structureNumber: true,\n        location: true,\n        yearBuilt: true,\n        yearReconstructed: true,\n        fedAgency: true,\n        serviceOn: true,\n        routePrefix: true,\n        long: true,\n        lat: true,\n      },\n    });\n\n    return new Response(JSON.stringify(bridges), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error fetching bridges:\", error);\n\n    return new Response(\n      JSON.stringify({\n        message: \"Failed to fetch bridges\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,EACJ,WAAW,EAAE,EACb,YAAY;YAAE,KAAK;YAAM,KAAK;QAAK,CAAC,EACpC,oBAAoB;YAAE,KAAK;YAAG,KAAK;QAAK,CAAC,EACzC,YAAY,EAAE,EACd,YAAY,CAAC,EACb,cAAc,CAAC,EACf,OAAO,CAAC,EACR,MAAM,CAAC,EACR,GAAG;QAEJ,4BAA4B;QAC5B,MAAM,UAAe,CAAC;QACtB,IAAI,UAAU,QAAQ,SAAS,GAAG,SAAS,UAAU;QACrD,IAAI,UAAU,GAAG,IAAI,UAAU,GAAG,EAAE;YAClC,QAAQ,SAAS,GAAG;gBAClB,KAAK,UAAU,GAAG,IAAI;gBACtB,KAAK,UAAU,GAAG,IAAI;YACxB;QACF;QACA,IAAI,kBAAkB,GAAG,IAAI,kBAAkB,GAAG,EAAE;YAClD,QAAQ,iBAAiB,GAAG;gBAC1B,KAAK,kBAAkB,GAAG,IAAI;gBAC9B,KAAK,kBAAkB,GAAG,IAAI;YAChC;QACF;QACA,IAAI,WAAW,QAAQ,SAAS,GAAG;QACnC,IAAI,WAAW,QAAQ,SAAS,GAAG;QACnC,IAAI,aAAa,QAAQ,WAAW,GAAG;QAEvC,iBAAiB;QACjB,MAAM,UAAU,MAAM,8GAAA,CAAA,UAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC3C,OAAO;YACP,QAAQ;gBACN,iBAAiB;gBACjB,UAAU;gBACV,WAAW;gBACX,mBAAmB;gBACnB,WAAW;gBACX,WAAW;gBACX,aAAa;gBACb,MAAM;gBACN,KAAK;YACP;QACF;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,UAAU;YAC3C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}