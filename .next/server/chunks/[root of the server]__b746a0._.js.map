{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmadhawamdah/Documents/map9/prisma/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton();\n\nexport default prisma;\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,2GAAA,CAAA,eAAY;AACzB;AAMA,MAAM,SAAS,WAAW,YAAY,IAAI;uCAE3B;AAEf,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmadhawamdah/Documents/map9/src/app/api/condition/route.ts"],"sourcesContent":["import prisma from \"../../../../prisma/db\";\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n\n    const {\n      bridgeCondition = \"\",\n      deckCond = \"\",\n      superstructureCond = \"\",\n      substructureCond = \"\",\n      channelCond = \"\",\n      culvertCond = \"\",\n      structuralEval = \"\",\n      deckGeometryEval = \"\",\n      underclearanceEval = \"\",\n      waterwayEval = \"\",\n      apprRoadEval = { min: 0, max: 0 },\n      postingEval = { min: 0, max: 0 },\n      lowestRating = { min: 0, max: 0 },\n    } = body;\n\n    // Initialize filters for Condition table\n    const filters: any = {};\n\n    // Add string conditions to filters\n    if (bridgeCondition) filters.bridgeCondition = bridgeCondition;\n    if (deckCond) filters.deckCond = deckCond;\n    if (superstructureCond) filters.superstructureCond = superstructureCond;\n    if (substructureCond) filters.substructureCond = substructureCond;\n    if (channelCond) filters.channelCond = channelCond;\n    if (culvertCond) filters.culvertCond = culvertCond;\n    if (structuralEval) filters.structuralEval = structuralEval;\n    if (deckGeometryEval) filters.deckGeometryEval = deckGeometryEval;\n    if (underclearanceEval) filters.underclearanceEval = underclearanceEval;\n    if (waterwayEval) filters.waterwayEval = waterwayEval;\n\n    // Add range filters\n    if (apprRoadEval.min || apprRoadEval.max) {\n      filters.apprRoadEval = {\n        gte: apprRoadEval.min || undefined,\n        lte: apprRoadEval.max || undefined,\n      };\n    }\n\n    if (postingEval.min || postingEval.max) {\n      filters.postingEval = {\n        gte: postingEval.min || undefined,\n        lte: postingEval.max || undefined,\n      };\n    }\n\n    if (lowestRating.min || lowestRating.max) {\n      filters.lowestRating = {\n        gte: lowestRating.min || undefined,\n        lte: lowestRating.max || undefined,\n      };\n    }\n\n    // Fetch filtered results with inner join on Bridge table\n    const conditions = await prisma.condition.findMany({\n      where: filters,\n      include: {\n        Bridge: {\n          select: {\n            structureNumber: true,\n            lat: true,\n            long: true,\n            location: true,\n            yearBuilt: true,\n          },\n        },\n      },\n    });\n\n    // Map results to include lat/long in top-level response\n    const results = conditions.map((condition) => ({\n      id: condition.id,\n      structureNumber: condition.structureNumber,\n      bridgeCondition: condition.bridgeCondition,\n      deckCond: condition.deckCond,\n      superstructureCond: condition.superstructureCond,\n      substructureCond: condition.substructureCond,\n      channelCond: condition.channelCond,\n      culvertCond: condition.culvertCond,\n      structuralEval: condition.structuralEval,\n      deckGeometryEval: condition.deckGeometryEval,\n      underclearanceEval: condition.underclearanceEval,\n      waterwayEval: condition.waterwayEval,\n      apprRoadEval: condition.apprRoadEval,\n      postingEval: condition.postingEval,\n      lowestRating: condition.lowestRating,\n      lat: condition.Bridge.lat,\n      long: condition.Bridge.long,\n      location: condition.Bridge.location,\n      yearBuilt: condition.Bridge.yearBuilt,\n    }));\n\n    return new Response(JSON.stringify(results), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error fetching conditions:\", error);\n\n    return new Response(\n      JSON.stringify({\n        message: \"Failed to fetch conditions\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}