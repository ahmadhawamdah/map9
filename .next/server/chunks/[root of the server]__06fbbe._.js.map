{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmadhawamdah/Documents/map9/src/app/api/condition/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n\n    const {\n      deckCondition = \"\",\n      superstructureCondition = \"\",\n      culvertCondition = \"\",\n      structuralEval = \"\",\n      bridgeCondition = \"\",\n      lowestRating = { min: 0, max: 0 },\n    } = body;\n\n    // Initialize filters\n    const filters: any = {};\n\n    // Add conditions to filters\n    if (deckCondition) filters.deckCondition = deckCondition;\n    if (superstructureCondition)\n      filters.superstructureCondition = superstructureCondition;\n    if (culvertCondition) filters.culvertCondition = culvertCondition;\n    if (structuralEval) filters.structuralEval = structuralEval;\n    if (bridgeCondition) filters.bridgeCondition = bridgeCondition;\n\n    // Add range filter for lowestRating\n    if (lowestRating.min || lowestRating.max) {\n      filters.lowestRating = {\n        gte: lowestRating.min || undefined,\n        lte: lowestRating.max || undefined,\n      };\n    }\n\n    // Fetch filtered results\n    const conditions = await prisma.condition.findMany({\n      where: filters,\n      select: {\n        deckCondition: true,\n        superstructureCondition: true,\n        culvertCondition: true,\n        structuralEval: true,\n        bridgeCondition: true,\n        lowestRating: true,\n      },\n    });\n\n    return new Response(JSON.stringify(conditions), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error fetching conditions:\", error);\n\n    return new Response(\n      JSON.stringify({\n        message: \"Failed to fetch conditions\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      }),\n      {\n        status: 500,\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAExB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,EACJ,gBAAgB,EAAE,EAClB,0BAA0B,EAAE,EAC5B,mBAAmB,EAAE,EACrB,iBAAiB,EAAE,EACnB,kBAAkB,EAAE,EACpB,eAAe;YAAE,KAAK;YAAG,KAAK;QAAE,CAAC,EAClC,GAAG;QAEJ,qBAAqB;QACrB,MAAM,UAAe,CAAC;QAEtB,4BAA4B;QAC5B,IAAI,eAAe,QAAQ,aAAa,GAAG;QAC3C,IAAI,yBACF,QAAQ,uBAAuB,GAAG;QACpC,IAAI,kBAAkB,QAAQ,gBAAgB,GAAG;QACjD,IAAI,gBAAgB,QAAQ,cAAc,GAAG;QAC7C,IAAI,iBAAiB,QAAQ,eAAe,GAAG;QAE/C,oCAAoC;QACpC,IAAI,aAAa,GAAG,IAAI,aAAa,GAAG,EAAE;YACxC,QAAQ,YAAY,GAAG;gBACrB,KAAK,aAAa,GAAG,IAAI;gBACzB,KAAK,aAAa,GAAG,IAAI;YAC3B;QACF;QAEA,yBAAyB;QACzB,MAAM,aAAa,MAAM,OAAO,SAAS,CAAC,QAAQ,CAAC;YACjD,OAAO;YACP,QAAQ;gBACN,eAAe;gBACf,yBAAyB;gBACzB,kBAAkB;gBAClB,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;YAChB;QACF;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,aAAa;YAC9C,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAE5C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,IACA;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IAEJ;AACF"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}